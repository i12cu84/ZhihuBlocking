// ==UserScript==
// @name         ZhihuBlocking
// @namespace    http://tampermonkey.net/
// @version      1.1
// @description  知乎内容自定义屏蔽词过滤器
// @author       github_i12cu84
// @match        https://www.zhihu.com/
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_registerMenuCommand
// ==/UserScript==

(function() {
    'use strict';

    // 从存储中获取屏蔽词，如果没有则使用默认列表
    let blockKeywords = JSON.parse(GM_getValue('blockKeywords', '[]'));
    if (!blockKeywords || blockKeywords.length === 0) {
        blockKeywords =
        [
  "原神",
  "米池",
  "米哈游",
  "散兵",
  "鸣潮",
  "lpl",
  "cv",
  "infp",
  "龟娘",
  "卞相壹",
  "战鹰",
  "民警",
  "虎扑",
  "明末",
  "虐猫",
  "乙游",
  "二游",
  "恋与",
  "丝之歌",
  "合法",
  "全红婵",
  "纳塔",
  "董宇辉"
]
        GM_setValue('blockKeywords', JSON.stringify(blockKeywords));
    }

    // 转换为小写的关键词数组，用于不区分大小写匹配
    let blockKeywordsLower = blockKeywords.map(keyword => keyword.toLowerCase());

    // 目标问题的父容器选择器
    const QUESTION_CONTAINER_SELECTOR = '.ContentItem';
    // 标题元素选择器
    const TITLE_SELECTOR = '.ContentItem-title a';

    // 创建控制面板
    function createControlPanel() {
        const panel = document.createElement('div');
        panel.id = 'happy-zhihu-panel';
        panel.style.position = 'fixed';
        panel.style.left = '20px';
        panel.style.bottom = '20px';
        panel.style.width = '300px';
        panel.style.background = 'white';
        panel.style.borderRadius = '8px';
        panel.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
        panel.style.zIndex = '10000';
        panel.style.fontFamily = 'system-ui, -apple-system, sans-serif';
        panel.style.overflow = 'hidden';

        // 标题栏
        const header = document.createElement('div');
        header.style.padding = '10px 15px';
        header.style.background = '#0084ff';
        header.style.color = 'white';
        header.innerHTML = '<strong>屏蔽词管理</strong>';
        panel.appendChild(header);

        // 内容区域
        const content = document.createElement('div');
        content.style.padding = '15px';

        // 添加关键词输入框
        const inputContainer = document.createElement('div');
        inputContainer.style.display = 'flex';
        inputContainer.style.marginBottom = '10px';

        const input = document.createElement('input');
        input.type = 'text';
        input.id = 'happy-zhihu-keyword-input';
        input.placeholder = '输入要屏蔽的关键词';
        input.style.flexGrow = '1';
        input.style.padding = '8px';
        input.style.border = '1px solid #ddd';
        input.style.borderRadius = '4px 0 0 4px';

        const addButton = document.createElement('button');
        addButton.textContent = '添加';
        addButton.style.background = '#0084ff';
        addButton.style.color = 'white';
        addButton.style.border = 'none';
        addButton.style.padding = '8px 12px';
        addButton.style.borderRadius = '0 4px 4px 0';
        addButton.style.cursor = 'pointer';

        inputContainer.appendChild(input);
        inputContainer.appendChild(addButton);
        content.appendChild(inputContainer);

        // 关键词列表
        const listTitle = document.createElement('div');
        listTitle.textContent = '当前屏蔽词:';
        listTitle.style.marginBottom = '8px';
        listTitle.style.fontSize = '14px';
        content.appendChild(listTitle);

        const keywordsList = document.createElement('div');
        keywordsList.id = 'happy-zhihu-keywords-list';
        keywordsList.style.maxHeight = '150px';
        keywordsList.style.overflowY = 'auto';
        keywordsList.style.fontSize = '13px';
        content.appendChild(keywordsList);

        // 复制按钮
        const copyButton = document.createElement('button');
        copyButton.textContent = '复制所有屏蔽词';
        copyButton.style.background = '#00c4ff';
        copyButton.style.color = 'white';
        copyButton.style.border = 'none';
        copyButton.style.padding = '8px 12px';
        copyButton.style.borderRadius = '4px';
        copyButton.style.cursor = 'pointer';
        copyButton.style.width = '100%';
        copyButton.style.marginTop = '10px';
        content.appendChild(copyButton);

        panel.appendChild(content);
        document.body.appendChild(panel);

        // 添加事件监听
        addButton.addEventListener('click', addKeyword);
        input.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') addKeyword();
        });
        copyButton.addEventListener('click', copyKeywordsToClipboard);

        // 初始渲染关键词列表
        renderKeywordsList();
    }

    // 添加关键词
    function addKeyword() {
        const input = document.getElementById('happy-zhihu-keyword-input');
        const keyword = input.value.trim();

        if (keyword && !blockKeywords.includes(keyword)) {
            blockKeywords.push(keyword);
            blockKeywordsLower = blockKeywords.map(kw => kw.toLowerCase());
            GM_setValue('blockKeywords', JSON.stringify(blockKeywords));
            renderKeywordsList();
            input.value = '';

            // 重新处理所有问题
            processAllQuestions();
        }
    }

    // 删除关键词
    function deleteKeyword(index) {
        blockKeywords.splice(index, 1);
        blockKeywordsLower = blockKeywords.map(kw => kw.toLowerCase());
        GM_setValue('blockKeywords', JSON.stringify(blockKeywords));
        renderKeywordsList();

        // 重新处理所有问题
        processAllQuestions();
    }

    // 渲染关键词列表
    function renderKeywordsList() {
        const list = document.getElementById('happy-zhihu-keywords-list');
        list.innerHTML = '';

        if (blockKeywords.length === 0) {
            list.innerHTML = '<div style="color:#999; padding:5px 0;">暂无屏蔽词</div>';
            return;
        }

        blockKeywords.forEach((keyword, index) => {
            const item = document.createElement('div');
            item.style.display = 'flex';
            item.style.justifyContent = 'space-between';
            item.style.alignItems = 'center';
            item.style.padding = '5px 0';
            item.style.borderBottom = '1px solid #f0f0f0';

            const text = document.createElement('span');
            text.textContent = keyword;

            const deleteBtn = document.createElement('button');
            deleteBtn.textContent = '删除';
            deleteBtn.style.background = 'none';
            deleteBtn.style.color = '#f56c6c';
            deleteBtn.style.border = 'none';
            deleteBtn.style.cursor = 'pointer';
            deleteBtn.style.fontSize = '12px';
            deleteBtn.addEventListener('click', () => deleteKeyword(index));

            item.appendChild(text);
            item.appendChild(deleteBtn);
            list.appendChild(item);
        });
    }

    // 复制所有屏蔽词到剪贴板
    function copyKeywordsToClipboard() {
        const keywordsString = JSON.stringify(blockKeywords, null, 2);

        // 创建临时文本区域进行复制
        const textArea = document.createElement('textarea');
        textArea.value = keywordsString;
        document.body.appendChild(textArea);
        textArea.select();

        try {
            const successful = document.execCommand('copy');
            if (successful) {
                showNotification('已复制所有屏蔽词到剪贴板！');
            } else {
                showNotification('复制失败，请手动复制');
            }
        } catch (err) {
            console.error('无法复制文本: ', err);
            showNotification('复制失败，请手动复制');
        }

        document.body.removeChild(textArea);
    }

    // 显示通知
    function showNotification(message) {
        // 创建通知元素
        const notification = document.createElement('div');
        notification.textContent = message;
        notification.style.position = 'fixed';
        notification.style.bottom = '70px';
        notification.style.left = '20px';
        notification.style.background = '#4caf50';
        notification.style.color = 'white';
        notification.style.padding = '8px 16px';
        notification.style.borderRadius = '4px';
        notification.style.zIndex = '10001';
        notification.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';

        document.body.appendChild(notification);

        // 3秒后移除通知
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 3000);
    }

    // 处理单个问题元素
    function processQuestionElement(element) {
        const titleElement = element.querySelector(TITLE_SELECTOR);
        if (titleElement) {
            const title = titleElement.textContent.trim();
            const titleLower = title.toLowerCase();
            // 检查标题是否包含任意关键词（不区分大小写）
            if (blockKeywordsLower.some(keyword => titleLower.includes(keyword))) {
                // 隐藏整个问题块
                element.style.display = 'none';
            }
        }
    }

    // 处理所有可见的问题元素
    function processAllQuestions() {
        document.querySelectorAll(QUESTION_CONTAINER_SELECTOR).forEach(processQuestionElement);
    }

    // 初始化
    function init() {
        // 处理现有内容
        processAllQuestions();

        // 创建控制面板
        createControlPanel();

        // 监听DOM变化
        const observer = new MutationObserver(mutations => {
            mutations.forEach(mutation => {
                if (mutation.addedNodes.length) {
                    mutation.addedNodes.forEach(node => {
                        if (node.nodeType === 1) {
                            if (node.matches(QUESTION_CONTAINER_SELECTOR)) {
                                processQuestionElement(node);
                            } else {
                                node.querySelectorAll(QUESTION_CONTAINER_SELECTOR).forEach(processQuestionElement);
                            }
                        }
                    });
                }
            });
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    }

    // 注册菜单命令
    GM_registerMenuCommand('打开屏蔽词管理', () => {
        const panel = document.getElementById('happy-zhihu-panel');
        if (panel) {
            panel.style.display = 'block';
        }
    });

    // 页面加载完成后初始化
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }
})();

/*
更新日志

初始版本 (v1.0)

基本功能：在知乎首页屏蔽包含特定关键词的问题

关键词列表硬编码在脚本中

使用MutationObserver监听动态加载的内容

简单直接的内容过滤功能

当前版本 (v1.1)

功能优化

-> 屏蔽词管理面板

在页面左下角添加了可交互的控制面板

支持实时添加和删除屏蔽词

所有更改立即生效并保存

->持久化存储

使用Tampermonkey的GM_setValue/GM_getValue API

用户自定义的屏蔽词在页面刷新后仍然保留

默认关键词列表作为初始值

->复制功能

添加"复制所有屏蔽词"按钮

一键将当前屏蔽词列表复制到剪贴板

JSON格式输出，便于直接粘贴到脚本代码中

->用户体验改进

添加操作反馈通知

更直观的界面设计

支持Enter键快速添加关键词

->代码结构优化

模块化函数设计，提高可维护性

更清晰的代码组织结构

添加了菜单命令支持

-> 技术实现优化

使用WeakSet缓存已处理的DOM元素，避免重复处理

优化MutationObserver回调逻辑，减少不必要的DOM操作

添加防抖函数，减少高频操作带来的性能开销

提供全局API以便调试和扩展

->使用体验提升

无需修改代码即可添加新的屏蔽词

可视化管理所有屏蔽词

轻松导出屏蔽词列表用于备份或分享

即时反馈操作结果
*/